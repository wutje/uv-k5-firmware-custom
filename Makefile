#Compile options for developers / debugging
ENABLE_CLANG                     := 0
ENABLE_SWD                       := 0
ENABLE_OVERLAY                   := 0
ENABLE_LTO                       := 1

# UART Programming 2.9 kB
ENABLE_UART                      := 1
ENABLE_UART_DEBUG                := 0

#Default to the default profile
#This can be overruled by invoking make with PROFILE set :
# make PROFILE=all
# This will include profile/all.mk
PROFILE?=default
$(info PROFILE = $(PROFILE))

PROFILE_FILE=profiles/$(PROFILE).mk
include $(PROFILE_FILE)


#Setup a build directory per profile we build
BUILD=build
BUILDDIR=$(BUILD)/$(PROFILE)
TARGET = $(BUILDDIR)/firmware

GIT_HASH_TMP := $(shell git rev-parse --short HEAD)
ifeq ($(GIT_HASH_TMP), )
	GIT_HASH := "NOGIT"
else
	GIT_HASH := $(GIT_HASH_TMP)
endif

$(info GIT_HASH = $(GIT_HASH))

ifeq ($(ENABLE_UART), 0)
	ENABLE_UART_DEBUG := 0
endif

ifeq ($(ENABLE_CLANG),1)
	# GCC's linker, ld, doesn't understand LLVM's generated bytecode
	ENABLE_LTO := 0
endif

ifeq ($(ENABLE_LTO),1)
	# can't have LTO and OVERLAY enabled at same time
	ENABLE_OVERLAY := 0
endif

ifeq ($(filter $(ENABLE_FMRADIO_64_76) $(ENABLE_FMRADIO_76_90) $(ENABLE_FMRADIO_76_108) $(ENABLE_FMRADIO_875_108) $(ENABLE_FMRADIO_64_108), 1), 1)
	ENABLE_FMRADIO := 1
else
	ENABLE_FMRADIO := 0
endif

ifeq ($(ENABLE_VOICE),1)
	# no need for beeps
	ENABLE_BOOT_BEEPS := 0
endif

BSP_DEFINITIONS := $(wildcard hardware/*/*.def)
BSP_HEADERS     := $(patsubst hardware/%,bsp/%,$(BSP_DEFINITIONS))
BSP_HEADERS     := $(patsubst %.def,%.h,$(BSP_HEADERS))

AS_SOURCES = start.S
C_SOURCES =
# Startup files
C_SOURCES += init.c
ifeq ($(ENABLE_OVERLAY),1)
	C_SOURCES += sram-overlay.c
endif
C_SOURCES += external/printf/printf.c

# Drivers
C_SOURCES += driver/adc.c
ifeq ($(ENABLE_UART),1)
	C_SOURCES += driver/aes.c
endif
C_SOURCES += driver/backlight.c
ifeq ($(ENABLE_FMRADIO), 1)
	C_SOURCES += driver/bk1080.c
endif
C_SOURCES += driver/bk4819.c
C_SOURCES += driver/crc.c
C_SOURCES += driver/eeprom.c
ifeq ($(ENABLE_OVERLAY),1)
	C_SOURCES += driver/flash.c
endif
C_SOURCES += driver/gpio.c
C_SOURCES += driver/i2c.c
C_SOURCES += driver/keyboard.c
C_SOURCES += driver/spi.c
C_SOURCES += driver/st7565.c
C_SOURCES += driver/system.c
C_SOURCES += driver/systick.c
ifeq ($(ENABLE_UART),1)
	C_SOURCES += driver/uart.c
endif

# Main
C_SOURCES += app/action.c
ifeq ($(ENABLE_AIRCOPY),1)
	C_SOURCES += app/aircopy.c
endif
C_SOURCES += app/app.c
C_SOURCES += app/dtmf.c
ifeq ($(ENABLE_FMRADIO), 1)
	C_SOURCES += app/fm.c
endif
C_SOURCES += app/generic.c
C_SOURCES += app/main.c
C_SOURCES += app/menu.c
C_SOURCES += app/search.c
ifeq ($(ENABLE_SCAN_IGNORE_LIST),1)
	C_SOURCES += freq_ignore.c
endif
ifeq ($(ENABLE_UART),1)
	C_SOURCES += app/uart.c
endif
ifeq ($(ENABLE_AM_FIX), 1)
	C_SOURCES += am_fix.c
endif
C_SOURCES += audio.c
C_SOURCES += bitmaps.c
C_SOURCES += board.c
C_SOURCES += dcs.c
C_SOURCES += font.c
C_SOURCES += frequencies.c
C_SOURCES += functions.c
C_SOURCES += helper/battery.c
C_SOURCES += helper/boot.c
ifeq ($(ENABLE_MDC1200),1)
	C_SOURCES += mdc1200.c
endif
C_SOURCES += misc.c
C_SOURCES += radio.c
C_SOURCES += scheduler.c
C_SOURCES += settings.c
ifeq ($(ENABLE_AIRCOPY),1)
	C_SOURCES += ui/aircopy.c
endif
C_SOURCES += ui/battery.c
ifeq ($(ENABLE_FMRADIO), 1)
	C_SOURCES += ui/fmradio.c
endif
C_SOURCES += ui/helper.c
C_SOURCES += ui/inputbox.c
ifeq ($(ENABLE_PWRON_PASSWORD),1)
	C_SOURCES += ui/lock.c
endif
C_SOURCES += ui/main.c
C_SOURCES += ui/menu.c
C_SOURCES += ui/search.c
C_SOURCES += ui/status.c
C_SOURCES += ui/ui.c
C_SOURCES += version.c
C_SOURCES += main.c
ifeq ($(ENABLE_PANADAPTER),1)
	C_SOURCES += panadapter.c
endif

ifeq ($(OS), Windows_NT)
	TOP := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))
else
	TOP := $(shell pwd)
endif

$(info TOP = $(TOP))

AS = arm-none-eabi-gcc

CC =
LD = arm-none-eabi-gcc

ifeq ($(ENABLE_CLANG),0)
	CC += arm-none-eabi-gcc
# Use GCC's linker to avoid undefined symbol errors
#	LD += arm-none-eabi-gcc
else
#	May need to adjust this to match your system
	CC += clang --sysroot=/usr/arm-none-eabi --target=arm-none-eabi
#	Bloats binaries to 512MB
#	LD = ld.lld
endif

OBJCOPY = arm-none-eabi-objcopy
SIZE = arm-none-eabi-size

ASFLAGS = -c -mcpu=cortex-m0
ifeq ($(ENABLE_OVERLAY),1)
	ASFLAGS += -DENABLE_OVERLAY
endif

CFLAGS =

ifeq ($(ENABLE_CLANG),0)
	#CFLAGS += -Os -Wall -Werror -mcpu=cortex-m0 -fno-builtin -fshort-enums -fno-delete-null-pointer-checks -std=c11 -MMD
	CFLAGS += -Os -Werror -mcpu=cortex-m0 -freorder-blocks-algorithm=stc -std=c11 -MMD
else
	# Oz needed to make it fit on flash
	CFLAGS += -Oz -Werror -mcpu=cortex-m0 -fno-builtin -fshort-enums -fno-delete-null-pointer-checks -std=c11 -MMD
endif

ifeq ($(ENABLE_LTO),1)
	CFLAGS += -flto=2
else
	# We get most of the space savings if LTO creates problems
	CFLAGS += -ffunction-sections -fdata-sections
endif

# May cause unhelpful build failures
#CFLAGS += -Wpadded

# catch any and all warnings
# better to bust than add new bugs
CFLAGS += -Wall -Wextra -Wpedantic

CFLAGS += -DCPU_CLOCK_HZ=48000000

CFLAGS += -DPRINTF_INCLUDE_CONFIG_H
CFLAGS += -DGIT_HASH=\"$(GIT_HASH)\"
ifeq ($(ENABLE_SWD),1)
	CFLAGS += -DENABLE_SWD
endif
ifeq ($(ENABLE_OVERLAY),1)
	CFLAGS += -DENABLE_OVERLAY
endif
ifeq ($(ENABLE_AIRCOPY),1)
	CFLAGS += -DENABLE_AIRCOPY
endif
ifeq ($(ENABLE_AIRCOPY_REMEMBER_FREQ),1)
	CFLAGS += -DENABLE_AIRCOPY_REMEMBER_FREQ
endif
ifeq ($(ENABLE_AIRCOPY_RX_REBOOT),1)
	CFLAGS += -DENABLE_AIRCOPY_RX_REBOOT
endif
ifeq ($(ENABLE_FMRADIO_64_76),1)
	CFLAGS += -DENABLE_FMRADIO_64_76
endif
ifeq ($(ENABLE_FMRADIO_76_90),1)
	CFLAGS += -DENABLE_FMRADIO_76_90
endif
ifeq ($(ENABLE_FMRADIO_76_108),1)
	CFLAGS += -DENABLE_FMRADIO_76_108
endif
ifeq ($(ENABLE_FMRADIO_875_108),1)
	CFLAGS += -DENABLE_FMRADIO_875_108
endif
ifeq ($(ENABLE_FMRADIO_64_108),1)
	CFLAGS += -DENABLE_FMRADIO_64_108
endif
ifeq ($(ENABLE_FMRADIO),1)
	CFLAGS += -DENABLE_FMRADIO
endif
ifeq ($(ENABLE_UART),1)
	CFLAGS += -DENABLE_UART
endif
ifeq ($(ENABLE_UART_DEBUG),1)
	CFLAGS += -DENABLE_UART_DEBUG
endif
ifeq ($(ENABLE_BIG_FREQ),1)
	CFLAGS  += -DENABLE_BIG_FREQ
endif
ifeq ($(ENABLE_DTMF_CALLING),1)
	CFLAGS  += -DENABLE_DTMF_CALLING
endif
ifeq ($(ENABLE_DTMF_LIVE_DECODER),1)
	CFLAGS  += -DENABLE_DTMF_LIVE_DECODER
endif
ifeq ($(ENABLE_DTMF_TIMING_SETTINGS),1)
	CFLAGS  += -DENABLE_DTMF_TIMING_SETTINGS
endif
ifeq ($(ENABLE_SHOW_FREQ_IN_CHAN),1)
	CFLAGS  += -DENABLE_SHOW_FREQ_IN_CHAN
endif
ifeq ($(ENABLE_SMALL_BOLD),1)
	CFLAGS  += -DENABLE_SMALL_BOLD
endif
ifeq ($(ENABLE_SMALLEST_FONT),1)
	CFLAGS  += -DENABLE_SMALLEST_FONT
endif
ifeq ($(ENABLE_TRIM_TRAILING_ZEROS),1)
	CFLAGS  += -DENABLE_TRIM_TRAILING_ZEROS
endif
ifeq ($(ENABLE_NOAA),1)
	CFLAGS  += -DENABLE_NOAA
endif
ifeq ($(ENABLE_VOICE),1)
	CFLAGS  += -DENABLE_VOICE
endif
ifeq ($(ENABLE_MUTE_RADIO_FOR_VOICE),1)
	CFLAGS  += -DENABLE_MUTE_RADIO_FOR_VOICE
endif
ifeq ($(ENABLE_VOX),1)
	CFLAGS  += -DENABLE_VOX
endif
ifeq ($(ENABLE_VOX_MORE_SENSITIVE),1)
	CFLAGS  += -DENABLE_VOX_MORE_SENSITIVE
endif
ifeq ($(ENABLE_TX_POWER_FIX),1)
	CFLAGS  += -DENABLE_TX_POWER_FIX
endif
ifeq ($(ENABLE_ALARM),1)
	CFLAGS  += -DENABLE_ALARM
endif
ifdef ENABLE_TX_TONE_HZ
	ifneq ($(ENABLE_TX_TONE_HZ), 0)
		CFLAGS += -DENABLE_TX_TONE_HZ=$(ENABLE_TX_TONE_HZ)
	endif
endif
ifeq ($(ENABLE_MDC1200),1)
	CFLAGS  += -DENABLE_MDC1200
endif
ifeq ($(ENABLE_MDC1200_SHOW_OP_ARG),1)
	CFLAGS  += -DENABLE_MDC1200_SHOW_OP_ARG
endif
ifeq ($(ENABLE_MDC1200_SIDE_BEEP),1)
	CFLAGS  += -DENABLE_MDC1200_SIDE_BEEP
endif
ifeq ($(ENABLE_PWRON_PASSWORD),1)
	CFLAGS  += -DENABLE_PWRON_PASSWORD
endif
ifeq ($(ENABLE_RESET_AES_KEY),1)
	CFLAGS  += -DENABLE_RESET_AES_KEY
endif
ifeq ($(ENABLE_WIDE_RX),1)
	CFLAGS  += -DENABLE_WIDE_RX
endif
ifeq ($(ENABLE_TX_WHEN_AM),1)
	CFLAGS  += -DENABLE_TX_WHEN_AM
endif
ifeq ($(ENABLE_F_CAL_MENU),1)
	CFLAGS  += -DENABLE_F_CAL_MENU
endif
ifeq ($(ENABLE_FM_DEV_CAL_MENU),1)
	CFLAGS  += -DENABLE_FM_DEV_CAL_MENU
endif
ifeq ($(ENABLE_TX_UNLOCK_MENU),1)
	CFLAGS  += -DENABLE_TX_UNLOCK_MENU
endif
ifeq ($(ENABLE_TX_POWER_CAL_MENU),1)
	CFLAGS  += -DENABLE_TX_POWER_CAL_MENU
endif
ifeq ($(ENABLE_CTCSS_TAIL_PHASE_SHIFT),1)
	CFLAGS  += -DENABLE_CTCSS_TAIL_PHASE_SHIFT
endif
ifeq ($(ENABLE_CONTRAST),1)
	CFLAGS  += -DENABLE_CONTRAST
endif
ifeq ($(ENABLE_BOOT_BEEPS),1)
	CFLAGS  += -DENABLE_BOOT_BEEPS
endif
ifeq ($(ENABLE_DTMF_CALL_FLASH_LIGHT),1)
	CFLAGS  += -DENABLE_DTMF_CALL_FLASH_LIGHT
endif
ifeq ($(ENABLE_FLASH_LIGHT_SOS_TONE),1)
	CFLAGS  += -DENABLE_FLASH_LIGHT_SOS_TONE
endif
ifeq ($(ENABLE_SHOW_CHARGE_LEVEL),1)
	CFLAGS  += -DENABLE_SHOW_CHARGE_LEVEL
endif
ifeq ($(ENABLE_REVERSE_BAT_SYMBOL),1)
	CFLAGS  += -DENABLE_REVERSE_BAT_SYMBOL
endif
ifeq ($(ENABLE_CODE_SEARCH_TIMEOUT),1)
	CFLAGS  += -DENABLE_CODE_SEARCH_TIMEOUT
endif
ifeq ($(ENABLE_SCAN_IGNORE_LIST),1)
	CFLAGS  += -DENABLE_SCAN_IGNORE_LIST
endif
ifeq ($(ENABLE_SCAN_RANGES),1)
	CFLAGS  += -DENABLE_SCAN_RANGES
endif
ifeq ($(ENABLE_DTMF_KILL_REVIVE),1)
	CFLAGS  += -DENABLE_DTMF_KILL_REVIVE
endif
ifeq ($(ENABLE_FREQ_SEARCH_LNA),1)
	CFLAGS  += -DENABLE_FREQ_SEARCH_LNA
endif
ifeq ($(ENABLE_FREQ_SEARCH_TIMEOUT),1)
	CFLAGS  += -DENABLE_FREQ_SEARCH_TIMEOUT
endif
ifeq ($(ENABLE_AM_FIX),1)
	CFLAGS  += -DENABLE_AM_FIX
endif
ifeq ($(ENABLE_AM_FIX_SHOW_DATA),1)
	CFLAGS  += -DENABLE_AM_FIX_SHOW_DATA
endif
ifeq ($(ENABLE_AM_FIX_TEST1),1)
	CFLAGS  += -DENABLE_AM_FIX_TEST1
endif
ifeq ($(ENABLE_SQUELCH_MORE_SENSITIVE),1)
	CFLAGS  += -DENABLE_SQUELCH_MORE_SENSITIVE
endif
ifeq ($(ENABLE_SQ_OPEN_WITH_UP_DN_BUTTS),1)
	CFLAGS  += -DENABLE_SQ_OPEN_WITH_UP_DN_BUTTS
endif
ifeq ($(ENABLE_FASTER_CHANNEL_SCAN),1)
	CFLAGS  += -DENABLE_FASTER_CHANNEL_SCAN
endif
ifeq ($(ENABLE_backlight_ON_RX),1)
	CFLAGS  += -DENABLE_backlight_ON_RX
endif
ifeq ($(ENABLE_TX_AUDIO_BAR),1)
	CFLAGS  += -DENABLE_TX_AUDIO_BAR
endif
ifeq ($(ENABLE_TX_AUDIO_BACKLIGHT),1)
	CFLAGS  += -DENABLE_TX_AUDIO_BACKLIGHT
endif
ifeq ($(ENABLE_COPY_CHAN_TO_VFO_TO_CHAN),1)
	CFLAGS  += -DENABLE_COPY_CHAN_TO_VFO_TO_CHAN
endif
ifeq ($(ENABLE_SIDE_BUTT_MENU),1)
	CFLAGS += -DENABLE_SIDE_BUTT_MENU
endif
ifeq ($(ENABLE_KEYLOCK),1)
	CFLAGS += -DENABLE_KEYLOCK
endif
ifeq ($(ENABLE_SINGLE_VFO_CHAN),1)
	CFLAGS  += -DENABLE_SINGLE_VFO_CHAN
endif
ifeq ($(ENABLE_PANADAPTER),1)
	CFLAGS += -DENABLE_PANADAPTER
endif
ifeq ($(ENABLE_PANADAPTER_PEAK_FREQ),1)
	CFLAGS += -DENABLE_PANADAPTER_PEAK_FREQ
endif

LDFLAGS =
ifeq ($(ENABLE_CLANG),0)
	LDFLAGS += -mcpu=cortex-m0 -nostartfiles -Wl,-T,firmware.ld
else
#	Fix warning about implied executable stack
	LDFLAGS += -z noexecstack -mcpu=cortex-m0 -nostartfiles -Wl,-T,firmware.ld
endif

# Use newlib-nano instead of newlib
LDFLAGS += --specs=nano.specs

ifeq ($(ENABLE_LTO),0)
	# Throw away unneeded func/data sections like LTO does
	LDFLAGS += -Wl,--gc-sections
endif

ifeq ($(DEBUG),1)
	ASFLAGS += -g
	CFLAGS  += -g
	LDFLAGS += -g
endif

INC =
INC += -I $(TOP)
INC += -I $(TOP)/external/CMSIS_5/CMSIS/Core/Include/
INC += -I $(TOP)/external/CMSIS_5/Device/ARM/ARMCM0/Include

LIBS =

DEPS = $(OBJS:.o=.d)

ifeq ($(OS), Windows_NT)
	PYTHON = $(shell where python 2>NUL || where python3 2>NUL)
else
	PYTHON = $(shell which python || which python3)
endif

all: $(TARGET).packed.bin $(TARGET).bin $(TARGET).elf $(OBJS)

debug:
	/opt/openocd/bin/openocd -c "bindto 0.0.0.0" -f interface/jlink.cfg -f dp32g030.cfg

flash:
	/opt/openocd/bin/openocd -c "bindto 0.0.0.0" -f interface/jlink.cfg -f dp32g030.cfg -c "write_image firmware.bin 0; shutdown;"

$(BUILDDIR)/version.o: .FORCE

OBJS=
OBJS+=$(patsubst %.c,$(BUILDDIR)/%.o,$(C_SOURCES))
OBJS+=$(patsubst %.S,$(BUILDDIR)/%.o,$(AS_SOURCES))

#Create elf file, usefull for debugging and base for other formats
%.elf: $(OBJS)
	$(info [LD $@])
	@$(LD) $(LDFLAGS) $^ -o $@ $(LIBS)

#Create the bin file, used by k5prog
%.bin: %.elf
	$(info [BIN $@])
	@$(SIZE) $<
	@$(OBJCOPY) -O binary $< $@

#Create packed and obfuscated .bin file used by original Windows application
%.packed.bin: %.bin
	$(info [PACKED BIN $@])
	$(info PYTHON = $(PYTHON))
	@-$(PYTHON) fw-pack.py $< $(GIT_HASH) $@

bsp/dp32g030/%.h: hardware/dp32g030/%.def

$(BUILDDIR)/%.o: %.c $(PROFILE_FILE) | $(BSP_HEADERS)
	$(info [CC $<])
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) $(INC) -c $< -o $@

$(BUILDDIR)/%.o: %.S $(PROFILE_FILE)
	$(info [AS $<])
	@mkdir -p $(dir $@)
	@$(AS) $(ASFLAGS) $< -o $@

.FORCE:

-include $(DEPS)

clean:
	$(info [RM $(BUILDDIR)])
	@rm -rf $(BUILDDIR)
